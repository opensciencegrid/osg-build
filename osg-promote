#!/usr/bin/python
"""A package promotion script for OSG"""
# TODO: Implement --wiki
# TODO: Do not attempt to promote a build if the build is already in the destination
# TODO This code needs rewriting to use less globals and be less brittle.
#      mostly because the above two todo items, while they look trivial, and
#      should be trivial, aren't.
#      The mix of what's in the 'Promoter' class and what isn't is also
#      inconsistent.



import glob
import re
import os
import shutil
import subprocess
import sys
import time
import urllib

from osgbuild import kojiinter
from osgbuild import utils
from osgbuild.utils import printf, print_table
from optparse import OptionParser


kwrap = None
ksession = None
tagged_builds_cache = {}
tagged_packages_cache = {}
options = None
dvers = []

VALID_DVERS = ["el5", "el6"]
VALID_ROUTES = {
    "testing": ["osg-development", "osg-testing"],
    "contrib": ["osg-development", "osg-contrib"],
    "release": ["osg-testing", "osg-prerelease"],
    "prerelease": ["osg-testing", "osg-prerelease"],
    "upcoming": ["osg-upcoming-development", "osg-upcoming-testing"],
    "hcc": ["hcc-testing", "hcc-release"],
   }

def any(iterable):
    for element in iterable:
        if element:
            return True
    return False

def parse_cmdline_args(argv):
    parser = OptionParser("""
    %prog -r|--route ROUTE [options] <packages or builds>
""")
    parser.add_option("-r", "--route", default="testing", type='choice', choices=VALID_ROUTES.keys(),
                      help="The promotion route to use. Valid routes are: " + ", ".join(VALID_ROUTES.keys()))
    parser.add_option("-n", "--dry-run", action="store_true", default=False,
                      help="Do not promote, just show what would be done")
    parser.add_option("--el5-only", action="store_false", dest='el6', default=True,
                      help="Promote only el5 packages.")
    parser.add_option("--el6-only", action="store_false", dest='el5', default=True,
                      help="Promote only el6 packages.")
    parser.add_option("--ignore-rejects", dest="ignore_rejects", action="store_true", default=False,
                      help="Ignore rejections due to version mismatch between dvers or missing package for one dver")
    of_choices = ['old', 'prerelnote', 'relnote', 'none']
    parser.add_option("--output-format", "--of", default='old', type='choice', choices=of_choices,
                      help="Valid output formats are: " + ", ".join(of_choices))
    parser.add_option("--no-date", "--nodate", default=False, action="store_true",
                      help="Do not add the date to the wiki code")
    parser.add_option("--regen", default=False, action="store_true",
                      help="Regenerate repo(s) afterward")
    parser.add_option("-w", "--wiki", "--twiki", default=False, action="store_true",
                      help="Do not promote, only generate wiki code for the arguments. (Unimplemented)")
    # ^ TODO Implement this
    parser.add_option("-y", "--assume-yes", action="store_true", default=False,
                      help="Do not prompt before promotion")
    
    options, args = parser.parse_args(argv[1:])

    if not options.el5 and not options.el6:
        parser.error("Can't specify both --el5-only and --el6-only")

    # optparse doesn't do 'append_const' in python 2.4 so simulate it
    options.dvers = []
    if options.el5: options.dvers.append('el5')
    if options.el6: options.dvers.append('el6')

    if options.route:
        # User is allowed to specify the shortest unambiguous prefix of a route
        matching_routes = [x for x in VALID_ROUTES.keys() if x.startswith(options.route)]
        if len(matching_routes) > 1:
            parser.error("Ambiguous route. Matching routes are: " + ", ".join(matching_routes))
        elif not matching_routes:
            parser.error("Invalid route. Valid routes are: " + ", ".join(VALID_ROUTES.keys()))
        else:
            options.route = matching_routes[0]
    else:
        parser.error("Missing required parameter '--route'")

    if options.wiki:
        options.dry_run = True

    return (options, args)


def get_latest_build(package, tag):
    """Return the NVR of the latest build of a package in a tag, or None"""
    data = ksession.listTagged(tag, latest=True, package=package)
    if not data:
        return None
    else:
        try:
            return data[0]['nvr']
        except AttributeError:
            return None
        except IndexError:
            return None


def get_build_uri(build):
    buildinfo = ksession.getBuild(build)
    return ("https://koji-hub.batlab.org/koji/buildinfo?buildID=%d" % int(buildinfo['id']))


def split_nvr(build):
    """Split an NVR into a [Name, Version, Release] list"""
    match = re.match(r"(?P<name>.+)-(?P<version>[^-]+)-(?P<release>[^-]+)$", build)
    if match:
        return [match.group('name'), match.group('version'), match.group('release')]
    else:
        return []


def get_tagged_builds(tag):
    """Return a list of NVRs of all builds in a tag"""
    data = ksession.listTagged(tag)
    return [x['nvr'] for x in data]
    

def get_tagged_builds_latest(tag):
    """Return a list of NVRs of the latest builds of each package in a tag"""
    data = ksession.listTagged(tag, latest=True)
    return [x['nvr'] for x in data]


def get_tagged_packages(tag):
    """Return all package names in a tag"""
    data = ksession.listPackages(tagID=ksession.getTag(tag)['id'], inherited=True)
    return [x['package_name'] for x in data]
    

# TODO This should not raise an exception
def get_tag(pattern, dver=None):
    """Return the name of a koji tag matching 'pattern' for 'dver'.
    For example, get_tag('development', 'el5') returns 'el5-osg-development'
    If 'dver' is None, then the dver is assumed to be part of 'pattern'.
    Raise an Exception if no matching tag is found.

    """
    def get_first_tag(match, terms):
        try:
            return kwrap.search_names(terms, 'tag', match)[0]
        except IndexError:
            return None
    if dver is None:
        tag = (get_first_tag('exact', pattern) or get_first_tag('regex', re.escape(pattern) + ".*"))
    else:
        split_pattern = pattern.split("-", 1)
        tag = (# New-style tags
               get_first_tag('exact', '%s-%s-%s' % (split_pattern[0], dver, split_pattern[-1])) or # like hcc-el6-testing
               get_first_tag('exact', "%s-%s" % (pattern, dver)) or # like uscms-el6
               get_first_tag('regex', "%s-%s-%s.*" % (re.escape(split_pattern[0]), dver, re.escape(split_pattern[-1]))) or # like osg-el6-release-3.1.3
               # old-style tags
               get_first_tag('exact', "%s-%s" % (dver, pattern)) or # like el5-osg
               get_first_tag('exact', "%s-osg-%s" % (dver, pattern)) or # like el5-osg-upcoming
               get_first_tag('regex', "%s-(osg-)?%s.*" % (dver, re.escape(pattern))) # like el5-osg-release-3.1.3
              )
    if not tag:
        raise Exception("Can't find tag %s or variations of it in koji" % pattern)
    return tag


def split_dver(build):
    """Split out the dver from the NVR of 'build'.
    For example, split_dver("foobar-1-1.osg.el5") returns
    ("foobar-1-1.osg", "el5")
    
    """
    pattern = re.compile(r".(el\d)$")
    nvr_no_dver = pattern.sub("", build)
    dver = pattern.search(build)
    return (nvr_no_dver, dver and dver.group(1) or "")


def get_build_in_tag(tag, pkg_or_build):
    """Return the build matching 'pkg_or_build' in 'tag'.
    If pkg_or_build is not in the tag, returns None. Otherwise:
    If pkg_or_build is a package, returns the latest build for that
    package. If pkg_or_build is a build, it is returned unchanged.

    """
    if (not tagged_packages_cache or tagged_packages_cache.get(tag) is None
            or not tagged_builds_cache or tagged_builds_cache.get(tag) is None):
        populate_caches(tag)

    if pkg_or_build in tagged_packages_cache[tag]:
        return get_latest_build(pkg_or_build, tag)
    elif pkg_or_build in tagged_builds_cache[tag]:
        return pkg_or_build
    else:
        return None


def get_builds(tag_base, pkg_or_build):
    """Get a dict of builds keyed by dver for pkg_or_build.
    If pkg_or_build is a package, then it gets the latest version of the
    package in tag_base + dver.
    If pkg_or_build is a build, then it uses that specific version.
    
    If options.ignore_rejects is False, then it can reject packages if
    either of the following apply:
    * pkg_or_build is a build and a build with that NVR is missing from
      at least one dver. (For example, pkg_or_build is foobar-1-1.osg.el5,
      and foobar-1-1.osg.el5 exists but foobar-1-1.osg.el6 doesn't).
    * pkg_or_build is a package and the NVRs of the latest version of that
      package are different across NVRs. (For example, pkg_or_build is
      foobar, el5 has foobar-1-1.osg.el5, and el6 has foobar-1-2.osg.el6).
    In either of those cases, neither the el5 or the el6 builds should be
    promoted.

    In case of a rejection (or no matching packages found at all), an
    empty dict is returned.
    """
    builds = {}
    # Find each build for all dvers matching pkg_or_build
    for dver in dvers:
        tag = get_tag(tag_base, dver)

        pkg_or_build_no_dver, _ = split_dver(pkg_or_build)
        # Case 1: pkg_or_build is a build, in which case take off its dver
        # and put the current dver on, then find a build for that.
        build1 = get_build_in_tag(tag, "%s.%s" % (pkg_or_build_no_dver, dver))
        # Case 2: pkg_or_build is a package, in which case putting a dver
        # on doesn't help--just find the latest build in the tag.
        build2 = get_build_in_tag(tag, pkg_or_build_no_dver)

        build = build1 or build2
        if not build:
            printf("Warning: There is no build matching %s for dver %s.", pkg_or_build, dver, end='')
            if not options.ignore_rejects:
                print " Rejected package."
                return {}
            else:
                print ""
                continue
        builds[dver] = build

    if len(builds) == 0:
        return {}
    # find builds where the VERSION-RELEASEs (without dver) are distinct
    # between the dvers we are running the script for, and reject them.
    vrs = ['-'.join(split_nvr(builds[x])[1:]) for x in builds]
    vrs_no_dver = [split_dver(x)[0] for x in vrs]
    if len(set(vrs_no_dver)) > 1:
        printf("Warning: The versions of the builds matching %s are distinct across dvers.", pkg_or_build, end='')
        if not options.ignore_rejects:
            print " Rejected package."
            return {}
        else:
            print ""
    return builds


class Promoter(object):
    def __init__(self, route):
        self.tag_pkg_args = {}
        self.rejects = []
        self.from_tag_base, self.to_tag_base = VALID_ROUTES[route]


    def add_promotion(self, pkg_or_build):
        """See if 'pkg_or_build' can be promoted, add the build to
        self.tag_pkg_args for each tag it should be added to.
        
        """
        builds = get_builds(self.from_tag_base, pkg_or_build)
        if not builds and not options.ignore_rejects:
            self.rejects.append(pkg_or_build)
        else:
            for dver in builds:
                to_tag = get_tag(self.to_tag_base, dver)
            
                build = builds[dver]
                self.tag_pkg_args.setdefault(to_tag, [])
                self.tag_pkg_args[to_tag].append(build)

        
    def do_promotions(self):
        """Tag all builds selected to be tagged in self.tag_pkg_args.
        self.tag_pkg_args is a list of (tag, [builds]) pairs.

        If options.dry_run is True, no actual tagging happens.  If
        options.regen is True, then each repository that gets modified will be
        regenerated after all tagging is done.

        Will not attempt to tag builds already in the destination tag.

        Return a list of builds successfully promoted.

        """
        promoted_builds = {}

        printf("--- Tagging builds")
        tags = set() # Which tags to regen if we're doing that
        tasks = dict()
        for tag, builds in self.tag_pkg_args.iteritems():
            tags.add(tag)
            for build in builds:
                try:
                    # Make sure the build isn't already in tag
                    if build in tagged_builds_cache[tag]:
                        printf("Skipping %s, already in %s", build, tag)
                        continue
                except:
                    pass

                build_no_dver, dver = split_dver(build)
                dver = dver or ''
                # Launch the builds
                if not options.dry_run:
                    task_id = kwrap.tag_build(tag, build)
                    tasks[task_id] = (build_no_dver, dver, build)
                else:
                    printf("tagBuild('%s', '%s')", tag, build)

        # Watch the builds
        if not options.dry_run:
            kwrap.watch_tasks(list(tasks.keys()))
            for task_id in tasks:
                build_no_dver, dver, build = tasks[task_id]
                err = kojiinter.KojiLibInter.TASK_STATES[ksession.getTaskInfo(task_id)['state']] != 'CLOSED'
                if not err:
                    promoted_builds.setdefault(build_no_dver, dict())
                    promoted_builds[build_no_dver][dver] = build
                else:
                    printf("* Error promoting build %s", build)
        
        # Regen repos
        if options.regen:
            printf("--- Regenerating repos")
            for tag in tags:
                kwrap.watch_tasks([kwrap.regen_repo(tag)])
        
        return promoted_builds


def write_twiki(builds):
    out = sys.stdout
    first = True
    if options.output_format == 'relnote':
        # Release note format
        #    * build-1-2.osg.el5
        #    * build-1-2.osg.el6
        for dver in dvers:
            for build_no_dver in sorted(builds):
                build = builds[build_no_dver][dver]
                out.write("   * [[%s][%s]]\n" % (get_build_uri(build), build))
    elif options.output_format == 'old' or options.output_format == 'prerelnote':
        # Old (current) format, used in PreReleaseNotes
        # | DATE | build-1-2.osg (el5+el6) |
        for build_no_dver in sorted(builds):
            if first and not options.no_date:
                out.write("| %s |" % time.strftime("%Y-%m-%d"))
                first = False
            else:
                out.write("||")
            out.write(" %(build_no_dver)s " % locals())
            build_links = []
            for dver in sorted(builds[build_no_dver]):
                build = builds[build_no_dver][dver]
                build_links.append("[[%s][%s]]" % (get_build_uri(build), dver))
            out.write("(" + "+".join(build_links) + ")")
            out.write(" |\n")
    elif options.output_format == 'none':
        pass
    else:
        # Sanity check, but optparse should have caught this already
        print >> sys.stderr, "Unknown output format!"

        
def init_koji_session(do_login):
    "Connect to koji-hub. Authenticate if 'do_login' is True."
    global kwrap
    global ksession

    kwrap = kojiinter.KojiLibInter()
    kwrap.read_config_file()
    kwrap.init_koji_session(login=do_login)
    ksession = kwrap.kojisession


def populate_caches(tag):
    "Fill up builds cache and packages cache for tag"
    tagged_builds_cache[tag] = get_tagged_builds(tag)
    tagged_packages_cache[tag] = [split_nvr(x)[0] for x in tagged_builds_cache[tag]]


def main(argv=None):
    global options
    global dvers

    if argv is None:
        argv = sys.argv
    
    options, pkgs_or_builds = parse_cmdline_args(argv)

    dvers = options.dvers
    route = options.route


    init_koji_session(not options.dry_run)
    for tag in (get_tag(tag_base, dver) for tag_base in VALID_ROUTES[route] for dver in dvers):
        populate_caches(tag)

    printf("Promoting from %s to %s for dvers: %s", VALID_ROUTES[route][0], VALID_ROUTES[route][1], ", ".join(dvers))
    printf("Examining the following packages/builds:\n%s", "\n".join(["'" + x + "'" for x in pkgs_or_builds]))

    promoter = Promoter(route)
    for x in pkgs_or_builds:
        promoter.add_promotion(x)

    if promoter.rejects:
        print "Rejected package or builds:\n" + "\n".join(promoter.rejects)
        print "Rejects will not be promoted! Rerun with --ignore-rejects to promote them anyway."

    print "Promotion plan:"
    if any(promoter.tag_pkg_args.values()):
        print_table(promoter.tag_pkg_args)
    else:
        printf("Nothing will be promoted!")
        return 1
    
    question = "Proceed with promoting the builds?"
    try:
        proceed = (options.assume_yes or not sys.stdin.isatty() or utils.ask_yn(question))
    except KeyboardInterrupt:
        printf("Canceled.")
        return 3

    if proceed:
        promoted_builds = promoter.do_promotions()
        if options.output_format != 'none':
            printf("\nTwiki code for this set of promotions:\n")
            write_twiki(promoted_builds)
    else:
        printf("Not proceeding.")
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

